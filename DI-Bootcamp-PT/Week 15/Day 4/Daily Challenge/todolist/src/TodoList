import React, { useReducer, useState, useRef } from "react";
import "./TodoList.css"; // Importe le fichier CSS pour styliser le composant

function todoReducer(state, action) {
  switch (action.type) {
    case "ADD_TODO":
      return [
        ...state,
        { id: Date.now(), text: action.text, completed: false },
      ];
    case "REMOVE_TODO":
      return state.filter((todo) => todo.id !== action.id);
    case "TOGGLE_TODO":
      return state.map((todo) =>
        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo
      );
    case "EDIT_TODO":
      return state.map((todo) =>
        todo.id === action.id ? { ...todo, text: action.newText } : todo
      );
    case "FILTER_TODO":
      return action.filter === "all"
        ? state
        : state.filter((todo) =>
            action.filter === "completed" ? todo.completed : !todo.completed
          );
    default:
      return state;
  }
}

function TodoList() {
  const [todos, dispatch] = useReducer(todoReducer, []);
  const [text, setText] = useState("");
  const [filter, setFilter] = useState("all");
  const editTextRef = useRef(null);

  const handleChange = (e) => {
    setText(e.target.value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!text.trim()) return;
    dispatch({ type: "ADD_TODO", text });
    setText("");
  };

  const handleRemove = (id) => {
    dispatch({ type: "REMOVE_TODO", id });
  };

  const handleToggle = (id) => {
    dispatch({ type: "TOGGLE_TODO", id });
  };

  const handleEdit = (id, newText) => {
    dispatch({ type: "EDIT_TODO", id, newText });
  };

  const handleStartEdit = (id, currentText) => {
    handleEdit(id, currentText);
    setTimeout(() => editTextRef.current.focus(), 0);
  };

  const handleFilterChange = (newFilter) => {
    setFilter(newFilter);
    dispatch({ type: "FILTER_TODO", filter: newFilter });
  };

  return (
    <div className="todo-container">
      <h1 className="todo-header">Todo List</h1>
      <form className="todo-form" onSubmit={handleSubmit}>
        <input
          className="todo-input"
          type="text"
          value={text}
          onChange={handleChange}
        />
        <button className="todo-button" type="submit">
          Add Todo
        </button>
      </form>
      <div className="filter-buttons">
        <button
          className="filter-button"
          onClick={() => handleFilterChange("all")}
        >
          All
        </button>
        <button
          className="filter-button"
          onClick={() => handleFilterChange("completed")}
        >
          Completed
        </button>
        <button
          className="filter-button"
          onClick={() => handleFilterChange("active")}
        >
          Active
        </button>
      </div>
      <ul className="todo-list">
        {todos.map((todo) => (
          <li key={todo.id} className="todo-item">
            {todo.id === editingId ? (
              <form
                onSubmit={() => handleEdit(todo.id, editTextRef.current.value)}
              >
                <input type="text" defaultValue={todo.text} ref={editTextRef} />
                <button type="submit">Save</button>
              </form>
            ) : (
              <>
                <span className={todo.completed ? "completed" : ""}>
                  {todo.text}
                </span>
                <button onClick={() => handleToggle(todo.id)}>
                  {todo.completed ? "Undo" : "Complete"}
                </button>
                <button onClick={() => handleStartEdit(todo.id, todo.text)}>
                  Edit
                </button>
                <button onClick={() => handleRemove(todo.id)}>Remove</button>
              </>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default TodoList;
